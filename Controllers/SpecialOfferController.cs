// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using InstantHelper;
using LinqKit;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SalesAPI.Entities;
using SalesAPI.Models;
using SalesAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace SalesAPI.Controllers {
    
    
    // Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("SpecialOffer")]
    public class SpecialOfferController : ControllerBase {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public SpecialOfferController(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        [HttpGet("")]
        public IQueryable<SpecialOfferModel> GetAllSpecialOffers() {

            ICollection<SpecialOfferModel> models = _mapper.Map<ICollection<SpecialOfferModel>>(_entities.SpecialOffers);

            return models.AsQueryable();
        }
        
        [HttpGet("Paged")]
        public IPagedList<SpecialOfferModel> GetPagedSpecialOffers(int pageIndex, int pageSize) {

            ICollection<SpecialOfferModel> models = _mapper.Map<ICollection<SpecialOfferModel>>(_entities.SpecialOffers);

            return models.ToPagedList(pageIndex, pageSize, 0, models.Count);
        }
        
        [HttpGet("{specialOfferID}")]
        public async Task<ActionResult> GetSpecialOffer_BySpecialOfferID(int specialOfferID) {

            SpecialOfferModel model;

          var query = await SearchByPk(specialOfferID);
            if (!query.Any()) {
              return NotFound();
            }
            else {
           model = _mapper.Map<SpecialOfferModel>(query.SingleOrDefault());
            }

            return Ok(model);
        }
        
        [HttpPost("")]
        public async Task<ActionResult> AddSpecialOffer([FromBody]SpecialOfferModel model) {

            SpecialOffer entity = null;

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }


            var search = SearchbyUnique(model.Description, model.DiscountPct, model.Type, model.Category, model.StartDate, model.EndDate, model.MinQty, model.MaxQty);
            if (search.Result.Count() > 0) {
              return BadRequest("Duplicate Record;" + string.Format("Record already exists in the system with this(these) value(s):{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}", model.Description, model.DiscountPct, model.Type, model.Category, model.StartDate, model.EndDate, model.MinQty, model.MaxQty));
            }

           try
           {
                 entity = _mapper.Map<SpecialOffer>(model);
                _entities.SpecialOffers.Add(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }

            model.SpecialOfferID = entity.SpecialOfferID;
            _logger.LogInfo(string.Format("SpecialOffer added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return CreatedAtAction("GetSpecialOffer_BySpecialOfferID", new {specialOfferID = entity.SpecialOfferID}, model);
        }
        
        [HttpPut("{specialOfferID}")]
        public async Task<ActionResult> UpdateSpecialOffer(int specialOfferID, [FromBody]SpecialOfferModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var query = SearchByPk(specialOfferID).Result;
            if (!query.Any()) {
              ModelState.AddModelError("Record Not Found", string.Format("SpecialOffer with _specialOfferID = '{0}' doesn't exist.",specialOfferID)); 
              return BadRequest(ModelState);
            }

           try
           {
            SpecialOffer entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SpecialOffer updated with values: '{0}'", JsonConvert.SerializeObject(model)));

            return StatusCode((int)HttpStatusCode.NoContent);
        }
        
        [HttpDelete("{specialOfferID}")]
        public async Task<ActionResult> DeleteSpecialOffer(int specialOfferID) {

            var query = SearchByPk(specialOfferID).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("SpecialOffer with _specialOfferID = '{0}' doesn't exist.",specialOfferID));
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.SpecialOffers.Remove(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SpecialOffer deleted with values: '{0}'", JsonConvert.SerializeObject(new SpecialOfferModel(entity))));

            return Ok(new SpecialOfferModel(entity));
        }
        
        private async Task<IQueryable<SpecialOffer>> SearchByPk(int specialOfferID) {

            var pb = PredicateBuilder.New<SpecialOffer>();
            pb = pb.And(p => p.SpecialOfferID.Equals(specialOfferID));

            return await Task.FromResult(_entities.SpecialOffers.AsExpandable().Where(pb));
        }
        
        private async Task<IQueryable<SpecialOffer>> SearchbyUnique(string description, decimal discountPct, string type, string category, System.DateTime startDate, System.DateTime endDate, int minQty, System.Int32? maxQty) {

            var pb = PredicateBuilder.New<SpecialOffer>();
            pb = pb.And(p => p.Description.Equals(description));
            pb = pb.And(p => p.DiscountPct.Equals(discountPct));
            pb = pb.And(p => p.Type.Equals(type));
            pb = pb.And(p => p.Category.Equals(category));
            pb = pb.And(p => p.StartDate.Equals(startDate));
            pb = pb.And(p => p.EndDate.Equals(endDate));
            pb = pb.And(p => p.MinQty.Equals(minQty));
            if (maxQty.HasValue) {
                pb = pb.And(p => ((System.Int32)p.MaxQty).Equals(maxQty.Value));
            }
            else {
                pb = pb.And(p => p.MaxQty == null);
            }

            return await Task.FromResult(_entities.SpecialOffers.AsExpandable().Where(pb));
        }
    }
}

