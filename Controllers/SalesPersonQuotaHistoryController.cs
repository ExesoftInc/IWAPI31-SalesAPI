// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using InstantHelper;
using LinqKit;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SalesAPI.Entities;
using SalesAPI.Models;
using SalesAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace SalesAPI.Controllers {
    
    
    // Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("SalesPersonQuotaHistory")]
    public class SalesPersonQuotaHistoryController : ControllerBase {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public SalesPersonQuotaHistoryController(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        [HttpGet("")]
        public IQueryable<SalesPersonQuotaHistoryModel> GetAllSalesPersonQuotaHistories() {

            ICollection<SalesPersonQuotaHistoryModel> models = _mapper.Map<ICollection<SalesPersonQuotaHistoryModel>>(_entities.SalesPersonQuotaHistories);

            return models.AsQueryable();
        }
        
        [HttpGet("Paged")]
        public IPagedList<SalesPersonQuotaHistoryModel> GetPagedSalesPersonQuotaHistories(int pageIndex, int pageSize) {

            ICollection<SalesPersonQuotaHistoryModel> models = _mapper.Map<ICollection<SalesPersonQuotaHistoryModel>>(_entities.SalesPersonQuotaHistories);

            return models.ToPagedList(pageIndex, pageSize, 0, models.Count);
        }
        
        [HttpGet("{businessEntityID}/{quotaDate}")]
        public async Task<ActionResult> GetSalesPersonQuotaHistory_ByBusinessEntityIDQuotaDate(int businessEntityID, System.DateTime quotaDate) {

            SalesPersonQuotaHistoryModel model;

          var query = await SearchByPk(businessEntityID, quotaDate);
            if (!query.Any()) {
              return NotFound();
            }
            else {
           model = _mapper.Map<SalesPersonQuotaHistoryModel>(query.SingleOrDefault());
            }

            return Ok(model);
        }
        
        [HttpGet("GetSalesPersonQuotaHistory_ByBusinessEntityID/{businessEntityID}")]
        public IQueryable<SalesPersonQuotaHistoryModel> GetSalesPersonQuotaHistory_ByBusinessEntityID(int businessEntityID) {

            ICollection<SalesPersonQuotaHistoryModel> models = _mapper.Map<ICollection<SalesPersonQuotaHistoryModel>>(_entities.SalesPersonQuotaHistories.Where(x => x.BusinessEntityID == businessEntityID));

            return models.AsQueryable();
        }
        
        [HttpPost("")]
        public async Task<ActionResult> AddSalesPersonQuotaHistory([FromBody]SalesPersonQuotaHistoryModel model) {

            SalesPersonQuotaHistory entity = null;

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var matchBusinessEntityID = _entities.SalesPersons.Where(x => x.BusinessEntityID.Equals(model.BusinessEntityID));
            if (!matchBusinessEntityID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("BusinessEntityID = '{0}' doesn't exist in the system.", model.BusinessEntityID));
            }


            var search = SearchbyUnique(model.BusinessEntityID, model.QuotaDate, model.SalesQuota);
            if (search.Result.Count() > 0) {
              return BadRequest("Duplicate Record;" + string.Format("Record already exists in the system with this(these) value(s):{0}, {1}, {2}", model.BusinessEntityID, model.QuotaDate, model.SalesQuota));
            }

           try
           {
                 entity = _mapper.Map<SalesPersonQuotaHistory>(model);
                _entities.SalesPersonQuotaHistories.Add(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }

            _logger.LogInfo(string.Format("SalesPersonQuotaHistory added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return CreatedAtAction("GetSalesPersonQuotaHistory_ByBusinessEntityIDQuotaDate", new {businessEntityID = entity.BusinessEntityID, quotaDate = entity.QuotaDate}, model);
        }
        
        [HttpPut("")]
        public async Task<ActionResult> UpdateSalesPersonQuotaHistory([FromBody]SalesPersonQuotaHistoryModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var query = SearchByPk(model.BusinessEntityID, model.QuotaDate).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("SalesPersonQuotaHistory with _businessEntityID, _quotaDate = '{0}', '{1}' doesn't exist.",model.BusinessEntityID, model.QuotaDate));
            }
            var matchBusinessEntityID = _entities.SalesPersons.Where(x => x.BusinessEntityID.Equals(model.BusinessEntityID));
            if (!matchBusinessEntityID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("BusinessEntityID = '{0}' doesn't exist in the system.", model.BusinessEntityID));
            }


           try
           {
            SalesPersonQuotaHistory entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SalesPersonQuotaHistory updated with values: '{0}'", JsonConvert.SerializeObject(model)));

            return StatusCode((int)HttpStatusCode.NoContent);
        }
        
        [HttpDelete("{businessEntityID}/{quotaDate}")]
        public async Task<ActionResult> DeleteSalesPersonQuotaHistory(int businessEntityID, System.DateTime quotaDate) {

            var query = SearchByPk(businessEntityID, quotaDate).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("SalesPersonQuotaHistory with _businessEntityID, _quotaDate = '{0}', '{1}' doesn't exist.",businessEntityID, quotaDate));
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.SalesPersonQuotaHistories.Remove(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SalesPersonQuotaHistory deleted with values: '{0}'", JsonConvert.SerializeObject(new SalesPersonQuotaHistoryModel(entity))));

            return Ok(new SalesPersonQuotaHistoryModel(entity));
        }
        
        private async Task<IQueryable<SalesPersonQuotaHistory>> SearchByPk(int businessEntityID, System.DateTime quotaDate) {

            var pb = PredicateBuilder.New<SalesPersonQuotaHistory>();
            pb = pb.And(p => p.BusinessEntityID.Equals(businessEntityID));
            pb = pb.And(p => p.QuotaDate.Equals(quotaDate));

            return await Task.FromResult(_entities.SalesPersonQuotaHistories.AsExpandable().Where(pb));
        }
        
        private async Task<IQueryable<SalesPersonQuotaHistory>> SearchbyUnique(int businessEntityID, System.DateTime quotaDate, decimal salesQuota) {

            var pb = PredicateBuilder.New<SalesPersonQuotaHistory>();
            pb = pb.And(p => p.BusinessEntityID.Equals(businessEntityID));
            pb = pb.And(p => p.QuotaDate.Equals(quotaDate));
            pb = pb.And(p => p.SalesQuota.Equals(salesQuota));

            return await Task.FromResult(_entities.SalesPersonQuotaHistories.AsExpandable().Where(pb));
        }
    }
}

