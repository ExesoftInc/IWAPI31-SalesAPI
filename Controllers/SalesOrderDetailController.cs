// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using InstantHelper;
using LinqKit;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SalesAPI.Entities;
using SalesAPI.Models;
using SalesAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace SalesAPI.Controllers {
    
    
    // Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("SalesOrderDetail")]
    public class SalesOrderDetailController : ControllerBase {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public SalesOrderDetailController(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        [HttpGet("")]
        public IQueryable<SalesOrderDetailModel> GetAllSalesOrderDetails() {

            ICollection<SalesOrderDetailModel> models = _mapper.Map<ICollection<SalesOrderDetailModel>>(_entities.SalesOrderDetails);

            return models.AsQueryable();
        }
        
        [HttpGet("Paged")]
        public IPagedList<SalesOrderDetailModel> GetPagedSalesOrderDetails(int pageIndex, int pageSize) {

            ICollection<SalesOrderDetailModel> models = _mapper.Map<ICollection<SalesOrderDetailModel>>(_entities.SalesOrderDetails);

            return models.ToPagedList(pageIndex, pageSize, 0, models.Count);
        }
        
        [HttpGet("{salesOrderID}/{salesOrderDetailID}")]
        public async Task<ActionResult> GetSalesOrderDetail_BySalesOrderIDSalesOrderDetailID(int salesOrderID, int salesOrderDetailID) {

            SalesOrderDetailModel model;

          var query = await SearchByPk(salesOrderID, salesOrderDetailID);
            if (!query.Any()) {
              return NotFound();
            }
            else {
           model = _mapper.Map<SalesOrderDetailModel>(query.SingleOrDefault());
            }

            return Ok(model);
        }
        
        [HttpGet("GetSalesOrderDetail_BySalesOrderID/{salesOrderID}")]
        public IQueryable<SalesOrderDetailModel> GetSalesOrderDetail_BySalesOrderID(int salesOrderID) {

            ICollection<SalesOrderDetailModel> models = _mapper.Map<ICollection<SalesOrderDetailModel>>(_entities.SalesOrderDetails.Where(x => x.SalesOrderID == salesOrderID));

            return models.AsQueryable();
        }
        
        [HttpGet("GetSalesOrderDetail_BySpecialOfferID/{specialOfferID}")]
        public IQueryable<SalesOrderDetailModel> GetSalesOrderDetail_BySpecialOfferID(int specialOfferID) {

            ICollection<SalesOrderDetailModel> models = _mapper.Map<ICollection<SalesOrderDetailModel>>(_entities.SalesOrderDetails.Where(x => x.SpecialOfferID == specialOfferID));

            return models.AsQueryable();
        }
        
        [HttpPost("")]
        public async Task<ActionResult> AddSalesOrderDetail([FromBody]SalesOrderDetailModel model) {

            SalesOrderDetail entity = null;

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var matchSalesOrderID = _entities.SalesOrderHeaders.Where(x => x.SalesOrderID.Equals(model.SalesOrderID));
            if (!matchSalesOrderID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("SalesOrderID = '{0}' doesn't exist in the system.", model.SalesOrderID));
            }

            var matchSpecialOfferID = _entities.SpecialOfferProducts.Where(x => x.SpecialOfferID.Equals(model.SpecialOfferID));
            if (!matchSpecialOfferID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("SpecialOfferID = '{0}' doesn't exist in the system.", model.SpecialOfferID));
            }


            var search = SearchbyUnique(model.SalesOrderID, model.CarrierTrackingNumber, model.OrderQty, model.ProductID, model.SpecialOfferID, model.UnitPrice, model.UnitPriceDiscount);
            if (search.Result.Count() > 0) {
              return BadRequest("Duplicate Record;" + string.Format("Record already exists in the system with this(these) value(s):{0}, {1}, {2}, {3}, {4}, {5}, {6}", model.SalesOrderID, model.CarrierTrackingNumber, model.OrderQty, model.ProductID, model.SpecialOfferID, model.UnitPrice, model.UnitPriceDiscount));
            }

           try
           {
                 entity = _mapper.Map<SalesOrderDetail>(model);
                _entities.SalesOrderDetails.Add(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }

            _logger.LogInfo(string.Format("SalesOrderDetail added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return CreatedAtAction("GetSalesOrderDetail_BySalesOrderIDSalesOrderDetailID", new {salesOrderID = entity.SalesOrderID, salesOrderDetailID = entity.SalesOrderDetailID}, model);
        }
        
        [HttpPut("{salesOrderID}/{salesOrderDetailID}")]
        public async Task<ActionResult> UpdateSalesOrderDetail(int salesOrderID, int salesOrderDetailID, [FromBody]SalesOrderDetailModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var query = SearchByPk(salesOrderID, salesOrderDetailID).Result;
            if (!query.Any()) {
              ModelState.AddModelError("Record Not Found", string.Format("SalesOrderDetail with _salesOrderID, _salesOrderDetailID = '{0}', '{1}' doesn't exist.",salesOrderID, salesOrderDetailID)); 
              return BadRequest(ModelState);
            }

            var matchSalesOrderID = _entities.SalesOrderHeaders.Where(x => x.SalesOrderID.Equals(model.SalesOrderID));
            if (!matchSalesOrderID.Any()) {
              ModelState.AddModelError("Foreign Key Violation", string.Format("SalesOrderDetail with SalesOrderID = '{0}' doesn't exist.", model.SalesOrderID)); 
              return BadRequest(ModelState);
            }


            var matchSpecialOfferID = _entities.SpecialOfferProducts.Where(x => x.SpecialOfferID.Equals(model.SpecialOfferID));
            if (!matchSpecialOfferID.Any()) {
              ModelState.AddModelError("Foreign Key Violation", string.Format("SalesOrderDetail with SpecialOfferID = '{0}' doesn't exist.", model.SpecialOfferID)); 
              return BadRequest(ModelState);
            }


           try
           {
            SalesOrderDetail entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SalesOrderDetail updated with values: '{0}'", JsonConvert.SerializeObject(model)));

            return StatusCode((int)HttpStatusCode.NoContent);
        }
        
        [HttpDelete("{salesOrderID}/{salesOrderDetailID}")]
        public async Task<ActionResult> DeleteSalesOrderDetail(int salesOrderID, int salesOrderDetailID) {

            var query = SearchByPk(salesOrderID, salesOrderDetailID).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("SalesOrderDetail with _salesOrderID, _salesOrderDetailID = '{0}', '{1}' doesn't exist.",salesOrderID, salesOrderDetailID));
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.SalesOrderDetails.Remove(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SalesOrderDetail deleted with values: '{0}'", JsonConvert.SerializeObject(new SalesOrderDetailModel(entity))));

            return Ok(new SalesOrderDetailModel(entity));
        }
        
        private async Task<IQueryable<SalesOrderDetail>> SearchByPk(int salesOrderID, int salesOrderDetailID) {

            var pb = PredicateBuilder.New<SalesOrderDetail>();
            pb = pb.And(p => p.SalesOrderID.Equals(salesOrderID));
            pb = pb.And(p => p.SalesOrderDetailID.Equals(salesOrderDetailID));

            return await Task.FromResult(_entities.SalesOrderDetails.AsExpandable().Where(pb));
        }
        
        private async Task<IQueryable<SalesOrderDetail>> SearchbyUnique(int salesOrderID, string carrierTrackingNumber, short orderQty, int productID, int specialOfferID, decimal unitPrice, decimal unitPriceDiscount) {

            var pb = PredicateBuilder.New<SalesOrderDetail>();
            pb = pb.And(p => p.SalesOrderID.Equals(salesOrderID));
            pb = pb.And(p => p.CarrierTrackingNumber.Equals(carrierTrackingNumber));
            pb = pb.And(p => p.OrderQty.Equals(orderQty));
            pb = pb.And(p => p.ProductID.Equals(productID));
            pb = pb.And(p => p.SpecialOfferID.Equals(specialOfferID));
            pb = pb.And(p => p.UnitPrice.Equals(unitPrice));
            pb = pb.And(p => p.UnitPriceDiscount.Equals(unitPriceDiscount));

            return await Task.FromResult(_entities.SalesOrderDetails.AsExpandable().Where(pb));
        }
    }
}

