// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using InstantHelper;
using LinqKit;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SalesAPI.Entities;
using SalesAPI.Models;
using SalesAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace SalesAPI.Controllers {
    
    
    // Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("Store")]
    public class StoreController : ControllerBase {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public StoreController(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        [HttpGet("")]
        public IQueryable<StoreModel> GetAllStores() {

            ICollection<StoreModel> models = _mapper.Map<ICollection<StoreModel>>(_entities.Stores);

            return models.AsQueryable();
        }
        
        [HttpGet("Paged")]
        public IPagedList<StoreModel> GetPagedStores(int pageIndex, int pageSize) {

            ICollection<StoreModel> models = _mapper.Map<ICollection<StoreModel>>(_entities.Stores);

            return models.ToPagedList(pageIndex, pageSize, 0, models.Count);
        }
        
        [HttpGet("{businessEntityID}")]
        public async Task<ActionResult> GetStore_ByBusinessEntityID(int businessEntityID) {

            StoreModel model;

          var query = await SearchByPk(businessEntityID);
            if (!query.Any()) {
              return NotFound();
            }
            else {
           model = _mapper.Map<StoreModel>(query.SingleOrDefault());
            }

            return Ok(model);
        }
        
        [HttpGet("GetStore_BySalesPersonID/{salesPersonID}")]
        public IQueryable<StoreModel> GetStore_BySalesPersonID(int salesPersonID) {

            ICollection<StoreModel> models = _mapper.Map<ICollection<StoreModel>>(_entities.Stores.Where(x => x.SalesPersonID == salesPersonID));

            return models.AsQueryable();
        }
        
        [HttpPost("")]
        public async Task<ActionResult> AddStore([FromBody]StoreModel model) {

            Store entity = null;

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            if (model.SalesPersonID != null) {
                var matchSalesPersonID = _entities.SalesPersons.Where(x => x.BusinessEntityID.Equals(model.SalesPersonID));
                if (!matchSalesPersonID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("SalesPersonID = '{0}' doesn't exist in the system.", model.SalesPersonID));
                }
            }


            var search = SearchbyUnique(model.BusinessEntityID);
            if (search.Result.Count() > 0) {
              return BadRequest("Duplicate Record;" + string.Format("Record already exists in the system with this(these) value(s):{0}", model.BusinessEntityID));
            }

           try
           {
                System.Int32 maxCount = 0;
                if(_entities.Stores.Count() > 0)
                    maxCount = _entities.Stores.Max(x => x.BusinessEntityID);
                model.BusinessEntityID= ++maxCount;
                 entity = _mapper.Map<Store>(model);
                _entities.Stores.Add(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }

            _logger.LogInfo(string.Format("Store added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return CreatedAtAction("GetStore_ByBusinessEntityID", new {businessEntityID = entity.BusinessEntityID}, model);
        }
        
        [HttpPut("")]
        public async Task<ActionResult> UpdateStore([FromBody]StoreModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var query = SearchByPk(model.BusinessEntityID).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("Store with _businessEntityID = '{0}' doesn't exist.",model.BusinessEntityID));
            }
            if (model.SalesPersonID != null) {
                var matchSalesPersonID = _entities.SalesPersons.Where(x => x.BusinessEntityID.Equals(model.SalesPersonID));
                if (!matchSalesPersonID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("SalesPersonID = '{0}' doesn't exist in the system.", model.SalesPersonID));
                }
            }


           try
           {
            Store entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("Store updated with values: '{0}'", JsonConvert.SerializeObject(model)));

            return StatusCode((int)HttpStatusCode.NoContent);
        }
        
        [HttpDelete("{businessEntityID}")]
        public async Task<ActionResult> DeleteStore(int businessEntityID) {

            var query = SearchByPk(businessEntityID).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("Store with _businessEntityID = '{0}' doesn't exist.",businessEntityID));
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.Stores.Remove(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("Store deleted with values: '{0}'", JsonConvert.SerializeObject(new StoreModel(entity))));

            return Ok(new StoreModel(entity));
        }
        
        private async Task<IQueryable<Store>> SearchByPk(int businessEntityID) {

            var pb = PredicateBuilder.New<Store>();
            pb = pb.And(p => p.BusinessEntityID.Equals(businessEntityID));

            return await Task.FromResult(_entities.Stores.AsExpandable().Where(pb));
        }
        
        private async Task<IQueryable<Store>> SearchbyUnique(int businessEntityID) {

            var pb = PredicateBuilder.New<Store>();
            pb = pb.And(p => p.BusinessEntityID.Equals(businessEntityID));

            return await Task.FromResult(_entities.Stores.AsExpandable().Where(pb));
        }
    }
}

