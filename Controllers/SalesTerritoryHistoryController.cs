// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using InstantHelper;
using LinqKit;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SalesAPI.Entities;
using SalesAPI.Models;
using SalesAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace SalesAPI.Controllers {
    
    
    // Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("SalesTerritoryHistory")]
    public class SalesTerritoryHistoryController : ControllerBase {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public SalesTerritoryHistoryController(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        [HttpGet("")]
        public IQueryable<SalesTerritoryHistoryModel> GetAllSalesTerritoryHistories() {

            ICollection<SalesTerritoryHistoryModel> models = _mapper.Map<ICollection<SalesTerritoryHistoryModel>>(_entities.SalesTerritoryHistories);

            return models.AsQueryable();
        }
        
        [HttpGet("Paged")]
        public IPagedList<SalesTerritoryHistoryModel> GetPagedSalesTerritoryHistories(int pageIndex, int pageSize) {

            ICollection<SalesTerritoryHistoryModel> models = _mapper.Map<ICollection<SalesTerritoryHistoryModel>>(_entities.SalesTerritoryHistories);

            return models.ToPagedList(pageIndex, pageSize, 0, models.Count);
        }
        
        [HttpGet("{businessEntityID}/{startDate}/{territoryID}")]
        public async Task<ActionResult> GetSalesTerritoryHistory_ByBusinessEntityIDStartDateTerritoryID(int businessEntityID, System.DateTime startDate, int territoryID) {

            SalesTerritoryHistoryModel model;

          var query = await SearchByPk(businessEntityID, startDate, territoryID);
            if (!query.Any()) {
              return NotFound();
            }
            else {
           model = _mapper.Map<SalesTerritoryHistoryModel>(query.SingleOrDefault());
            }

            return Ok(model);
        }
        
        [HttpGet("GetSalesTerritoryHistory_ByBusinessEntityID/{businessEntityID}")]
        public IQueryable<SalesTerritoryHistoryModel> GetSalesTerritoryHistory_ByBusinessEntityID(int businessEntityID) {

            ICollection<SalesTerritoryHistoryModel> models = _mapper.Map<ICollection<SalesTerritoryHistoryModel>>(_entities.SalesTerritoryHistories.Where(x => x.BusinessEntityID == businessEntityID));

            return models.AsQueryable();
        }
        
        [HttpGet("GetSalesTerritoryHistory_ByTerritoryID/{territoryID}")]
        public IQueryable<SalesTerritoryHistoryModel> GetSalesTerritoryHistory_ByTerritoryID(int territoryID) {

            ICollection<SalesTerritoryHistoryModel> models = _mapper.Map<ICollection<SalesTerritoryHistoryModel>>(_entities.SalesTerritoryHistories.Where(x => x.TerritoryID == territoryID));

            return models.AsQueryable();
        }
        
        [HttpPost("")]
        public async Task<ActionResult> AddSalesTerritoryHistory([FromBody]SalesTerritoryHistoryModel model) {

            SalesTerritoryHistory entity = null;

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var matchBusinessEntityID = _entities.SalesPersons.Where(x => x.BusinessEntityID.Equals(model.BusinessEntityID));
            if (!matchBusinessEntityID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("BusinessEntityID = '{0}' doesn't exist in the system.", model.BusinessEntityID));
            }

            var matchTerritoryID = _entities.SalesTerritories.Where(x => x.TerritoryID.Equals(model.TerritoryID));
            if (!matchTerritoryID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("TerritoryID = '{0}' doesn't exist in the system.", model.TerritoryID));
            }


            var search = SearchbyUnique(model.BusinessEntityID, model.TerritoryID, model.StartDate, model.EndDate);
            if (search.Result.Count() > 0) {
              return BadRequest("Duplicate Record;" + string.Format("Record already exists in the system with this(these) value(s):{0}, {1}, {2}, {3}", model.BusinessEntityID, model.TerritoryID, model.StartDate, model.EndDate));
            }

           try
           {
                 entity = _mapper.Map<SalesTerritoryHistory>(model);
                _entities.SalesTerritoryHistories.Add(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }

            _logger.LogInfo(string.Format("SalesTerritoryHistory added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return CreatedAtAction("GetSalesTerritoryHistory_ByBusinessEntityIDStartDateTerritoryID", new {businessEntityID = entity.BusinessEntityID, startDate = entity.StartDate, territoryID = entity.TerritoryID}, model);
        }
        
        [HttpPut("")]
        public async Task<ActionResult> UpdateSalesTerritoryHistory([FromBody]SalesTerritoryHistoryModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var query = SearchByPk(model.BusinessEntityID, model.StartDate, model.TerritoryID).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("SalesTerritoryHistory with _businessEntityID, _startDate, _territoryID = '{0}', '{1}', '{2}' doesn't exist.",model.BusinessEntityID, model.StartDate, model.TerritoryID));
            }
            var matchBusinessEntityID = _entities.SalesPersons.Where(x => x.BusinessEntityID.Equals(model.BusinessEntityID));
            if (!matchBusinessEntityID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("BusinessEntityID = '{0}' doesn't exist in the system.", model.BusinessEntityID));
            }

            var matchTerritoryID = _entities.SalesTerritories.Where(x => x.TerritoryID.Equals(model.TerritoryID));
            if (!matchTerritoryID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("TerritoryID = '{0}' doesn't exist in the system.", model.TerritoryID));
            }


           try
           {
            SalesTerritoryHistory entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SalesTerritoryHistory updated with values: '{0}'", JsonConvert.SerializeObject(model)));

            return StatusCode((int)HttpStatusCode.NoContent);
        }
        
        [HttpDelete("{businessEntityID}/{startDate}/{territoryID}")]
        public async Task<ActionResult> DeleteSalesTerritoryHistory(int businessEntityID, System.DateTime startDate, int territoryID) {

            var query = SearchByPk(businessEntityID, startDate, territoryID).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("SalesTerritoryHistory with _businessEntityID, _startDate, _territoryID = '{0}', '{1}', '{2}' doesn't exist.",businessEntityID, startDate, territoryID));
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.SalesTerritoryHistories.Remove(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SalesTerritoryHistory deleted with values: '{0}'", JsonConvert.SerializeObject(new SalesTerritoryHistoryModel(entity))));

            return Ok(new SalesTerritoryHistoryModel(entity));
        }
        
        private async Task<IQueryable<SalesTerritoryHistory>> SearchByPk(int businessEntityID, System.DateTime startDate, int territoryID) {

            var pb = PredicateBuilder.New<SalesTerritoryHistory>();
            pb = pb.And(p => p.BusinessEntityID.Equals(businessEntityID));
            pb = pb.And(p => p.StartDate.Equals(startDate));
            pb = pb.And(p => p.TerritoryID.Equals(territoryID));

            return await Task.FromResult(_entities.SalesTerritoryHistories.AsExpandable().Where(pb));
        }
        
        private async Task<IQueryable<SalesTerritoryHistory>> SearchbyUnique(int businessEntityID, int territoryID, System.DateTime startDate, System.DateTime? endDate) {

            var pb = PredicateBuilder.New<SalesTerritoryHistory>();
            pb = pb.And(p => p.BusinessEntityID.Equals(businessEntityID));
            pb = pb.And(p => p.TerritoryID.Equals(territoryID));
            pb = pb.And(p => p.StartDate.Equals(startDate));
            if (endDate.HasValue) {
                pb = pb.And(p => ((System.DateTime)p.EndDate).Equals(endDate.Value));
            }
            else {
                pb = pb.And(p => p.EndDate == null);
            }

            return await Task.FromResult(_entities.SalesTerritoryHistories.AsExpandable().Where(pb));
        }
    }
}

