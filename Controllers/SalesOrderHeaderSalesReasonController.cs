// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using InstantHelper;
using LinqKit;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SalesAPI.Entities;
using SalesAPI.Models;
using SalesAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace SalesAPI.Controllers {
    
    
    // Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("SalesOrderHeaderSalesReason")]
    public class SalesOrderHeaderSalesReasonController : ControllerBase {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public SalesOrderHeaderSalesReasonController(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        [HttpGet("")]
        public IQueryable<SalesOrderHeaderSalesReasonModel> GetAllSalesOrderHeaderSalesReasons() {

            ICollection<SalesOrderHeaderSalesReasonModel> models = _mapper.Map<ICollection<SalesOrderHeaderSalesReasonModel>>(_entities.SalesOrderHeaderSalesReasons);

            return models.AsQueryable();
        }
        
        [HttpGet("Paged")]
        public IPagedList<SalesOrderHeaderSalesReasonModel> GetPagedSalesOrderHeaderSalesReasons(int pageIndex, int pageSize) {

            ICollection<SalesOrderHeaderSalesReasonModel> models = _mapper.Map<ICollection<SalesOrderHeaderSalesReasonModel>>(_entities.SalesOrderHeaderSalesReasons);

            return models.ToPagedList(pageIndex, pageSize, 0, models.Count);
        }
        
        [HttpGet("{salesOrderID}/{salesReasonID}")]
        public async Task<ActionResult> GetSalesOrderHeaderSalesReason_BySalesOrderIDSalesReasonID(int salesOrderID, int salesReasonID) {

            SalesOrderHeaderSalesReasonModel model;

          var query = await SearchByPk(salesOrderID, salesReasonID);
            if (!query.Any()) {
              return NotFound();
            }
            else {
           model = _mapper.Map<SalesOrderHeaderSalesReasonModel>(query.SingleOrDefault());
            }

            return Ok(model);
        }
        
        [HttpGet("GetSalesOrderHeaderSalesReason_BySalesOrderID/{salesOrderID}")]
        public IQueryable<SalesOrderHeaderSalesReasonModel> GetSalesOrderHeaderSalesReason_BySalesOrderID(int salesOrderID) {

            ICollection<SalesOrderHeaderSalesReasonModel> models = _mapper.Map<ICollection<SalesOrderHeaderSalesReasonModel>>(_entities.SalesOrderHeaderSalesReasons.Where(x => x.SalesOrderID == salesOrderID));

            return models.AsQueryable();
        }
        
        [HttpGet("GetSalesOrderHeaderSalesReason_BySalesReasonID/{salesReasonID}")]
        public IQueryable<SalesOrderHeaderSalesReasonModel> GetSalesOrderHeaderSalesReason_BySalesReasonID(int salesReasonID) {

            ICollection<SalesOrderHeaderSalesReasonModel> models = _mapper.Map<ICollection<SalesOrderHeaderSalesReasonModel>>(_entities.SalesOrderHeaderSalesReasons.Where(x => x.SalesReasonID == salesReasonID));

            return models.AsQueryable();
        }
        
        [HttpPost("")]
        public async Task<ActionResult> AddSalesOrderHeaderSalesReason([FromBody]SalesOrderHeaderSalesReasonModel model) {

            SalesOrderHeaderSalesReason entity = null;

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var matchSalesOrderID = _entities.SalesOrderHeaders.Where(x => x.SalesOrderID.Equals(model.SalesOrderID));
            if (!matchSalesOrderID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("SalesOrderID = '{0}' doesn't exist in the system.", model.SalesOrderID));
            }

            var matchSalesReasonID = _entities.SalesReasons.Where(x => x.SalesReasonID.Equals(model.SalesReasonID));
            if (!matchSalesReasonID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("SalesReasonID = '{0}' doesn't exist in the system.", model.SalesReasonID));
            }


            var search = SearchbyUnique(model.SalesOrderID, model.SalesReasonID);
            if (search.Result.Count() > 0) {
              return BadRequest("Duplicate Record;" + string.Format("Record already exists in the system with this(these) value(s):{0}, {1}", model.SalesOrderID, model.SalesReasonID));
            }

           try
           {
                 entity = _mapper.Map<SalesOrderHeaderSalesReason>(model);
                _entities.SalesOrderHeaderSalesReasons.Add(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }

            _logger.LogInfo(string.Format("SalesOrderHeaderSalesReason added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return CreatedAtAction("GetSalesOrderHeaderSalesReason_BySalesOrderIDSalesReasonID", new {salesOrderID = entity.SalesOrderID, salesReasonID = entity.SalesReasonID}, model);
        }
        
        [HttpPut("")]
        public async Task<ActionResult> UpdateSalesOrderHeaderSalesReason([FromBody]SalesOrderHeaderSalesReasonModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var query = SearchByPk(model.SalesOrderID, model.SalesReasonID).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("SalesOrderHeaderSalesReason with _salesOrderID, _salesReasonID = '{0}', '{1}' doesn't exist.",model.SalesOrderID, model.SalesReasonID));
            }
            var matchSalesOrderID = _entities.SalesOrderHeaders.Where(x => x.SalesOrderID.Equals(model.SalesOrderID));
            if (!matchSalesOrderID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("SalesOrderID = '{0}' doesn't exist in the system.", model.SalesOrderID));
            }

            var matchSalesReasonID = _entities.SalesReasons.Where(x => x.SalesReasonID.Equals(model.SalesReasonID));
            if (!matchSalesReasonID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("SalesReasonID = '{0}' doesn't exist in the system.", model.SalesReasonID));
            }


           try
           {
            SalesOrderHeaderSalesReason entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SalesOrderHeaderSalesReason updated with values: '{0}'", JsonConvert.SerializeObject(model)));

            return StatusCode((int)HttpStatusCode.NoContent);
        }
        
        [HttpDelete("{salesOrderID}/{salesReasonID}")]
        public async Task<ActionResult> DeleteSalesOrderHeaderSalesReason(int salesOrderID, int salesReasonID) {

            var query = SearchByPk(salesOrderID, salesReasonID).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("SalesOrderHeaderSalesReason with _salesOrderID, _salesReasonID = '{0}', '{1}' doesn't exist.",salesOrderID, salesReasonID));
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.SalesOrderHeaderSalesReasons.Remove(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SalesOrderHeaderSalesReason deleted with values: '{0}'", JsonConvert.SerializeObject(new SalesOrderHeaderSalesReasonModel(entity))));

            return Ok(new SalesOrderHeaderSalesReasonModel(entity));
        }
        
        private async Task<IQueryable<SalesOrderHeaderSalesReason>> SearchByPk(int salesOrderID, int salesReasonID) {

            var pb = PredicateBuilder.New<SalesOrderHeaderSalesReason>();
            pb = pb.And(p => p.SalesOrderID.Equals(salesOrderID));
            pb = pb.And(p => p.SalesReasonID.Equals(salesReasonID));

            return await Task.FromResult(_entities.SalesOrderHeaderSalesReasons.AsExpandable().Where(pb));
        }
        
        private async Task<IQueryable<SalesOrderHeaderSalesReason>> SearchbyUnique(int salesOrderID, int salesReasonID) {

            var pb = PredicateBuilder.New<SalesOrderHeaderSalesReason>();
            pb = pb.And(p => p.SalesOrderID.Equals(salesOrderID));
            pb = pb.And(p => p.SalesReasonID.Equals(salesReasonID));

            return await Task.FromResult(_entities.SalesOrderHeaderSalesReasons.AsExpandable().Where(pb));
        }
    }
}

