// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using InstantHelper;
using LinqKit;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SalesAPI.Entities;
using SalesAPI.Models;
using SalesAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace SalesAPI.Controllers {
    
    
    // Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("CurrencyRate")]
    public class CurrencyRateController : ControllerBase {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public CurrencyRateController(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        [HttpGet("")]
        public IQueryable<CurrencyRateModel> GetAllCurrencyRates() {

            ICollection<CurrencyRateModel> models = _mapper.Map<ICollection<CurrencyRateModel>>(_entities.CurrencyRates);

            return models.AsQueryable();
        }
        
        [HttpGet("Paged")]
        public IPagedList<CurrencyRateModel> GetPagedCurrencyRates(int pageIndex, int pageSize) {

            ICollection<CurrencyRateModel> models = _mapper.Map<ICollection<CurrencyRateModel>>(_entities.CurrencyRates);

            return models.ToPagedList(pageIndex, pageSize, 0, models.Count);
        }
        
        [HttpGet("{currencyRateID}")]
        public async Task<ActionResult> GetCurrencyRate_ByCurrencyRateID(int currencyRateID) {

            CurrencyRateModel model;

          var query = await SearchByPk(currencyRateID);
            if (!query.Any()) {
              return NotFound();
            }
            else {
           model = _mapper.Map<CurrencyRateModel>(query.SingleOrDefault());
            }

            return Ok(model);
        }
        
        [HttpGet("GetCurrencyRate_ByFromCurrencyCode/{fromCurrencyCode}")]
        public IQueryable<CurrencyRateModel> GetCurrencyRate_ByFromCurrencyCode(string fromCurrencyCode) {

            ICollection<CurrencyRateModel> models = _mapper.Map<ICollection<CurrencyRateModel>>(_entities.CurrencyRates.Where(x => x.FromCurrencyCode == fromCurrencyCode));

            return models.AsQueryable();
        }
        
        [HttpGet("GetCurrencyRate_ByToCurrencyCode/{toCurrencyCode}")]
        public IQueryable<CurrencyRateModel> GetCurrencyRate_ByToCurrencyCode(string toCurrencyCode) {

            ICollection<CurrencyRateModel> models = _mapper.Map<ICollection<CurrencyRateModel>>(_entities.CurrencyRates.Where(x => x.ToCurrencyCode == toCurrencyCode));

            return models.AsQueryable();
        }
        
        [HttpPost("")]
        public async Task<ActionResult> AddCurrencyRate([FromBody]CurrencyRateModel model) {

            CurrencyRate entity = null;

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var matchFromCurrencyCode = _entities.Currencies.Where(x => x.CurrencyCode.Equals(model.FromCurrencyCode));
            if (!matchFromCurrencyCode.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("FromCurrencyCode = '{0}' doesn't exist in the system.", model.FromCurrencyCode));
            }

            var matchToCurrencyCode = _entities.Currencies.Where(x => x.CurrencyCode.Equals(model.ToCurrencyCode));
            if (!matchToCurrencyCode.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("ToCurrencyCode = '{0}' doesn't exist in the system.", model.ToCurrencyCode));
            }


            var search = SearchbyUnique(model.CurrencyRateDate, model.FromCurrencyCode, model.ToCurrencyCode, model.AverageRate, model.EndOfDayRate);
            if (search.Result.Count() > 0) {
              return BadRequest("Duplicate Record;" + string.Format("Record already exists in the system with this(these) value(s):{0}, {1}, {2}, {3}, {4}", model.CurrencyRateDate, model.FromCurrencyCode, model.ToCurrencyCode, model.AverageRate, model.EndOfDayRate));
            }

           try
           {
                 entity = _mapper.Map<CurrencyRate>(model);
                _entities.CurrencyRates.Add(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }

            model.CurrencyRateID = entity.CurrencyRateID;
            _logger.LogInfo(string.Format("CurrencyRate added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return CreatedAtAction("GetCurrencyRate_ByCurrencyRateID", new {currencyRateID = entity.CurrencyRateID}, model);
        }
        
        [HttpPut("{currencyRateID}")]
        public async Task<ActionResult> UpdateCurrencyRate(int currencyRateID, [FromBody]CurrencyRateModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var query = SearchByPk(currencyRateID).Result;
            if (!query.Any()) {
              ModelState.AddModelError("Record Not Found", string.Format("CurrencyRate with _currencyRateID = '{0}' doesn't exist.",currencyRateID)); 
              return BadRequest(ModelState);
            }

            var matchFromCurrencyCode = _entities.Currencies.Where(x => x.CurrencyCode.Equals(model.FromCurrencyCode));
            if (!matchFromCurrencyCode.Any()) {
              ModelState.AddModelError("Foreign Key Violation", string.Format("CurrencyRate with FromCurrencyCode = '{0}' doesn't exist.", model.FromCurrencyCode)); 
              return BadRequest(ModelState);
            }


            var matchToCurrencyCode = _entities.Currencies.Where(x => x.CurrencyCode.Equals(model.ToCurrencyCode));
            if (!matchToCurrencyCode.Any()) {
              ModelState.AddModelError("Foreign Key Violation", string.Format("CurrencyRate with ToCurrencyCode = '{0}' doesn't exist.", model.ToCurrencyCode)); 
              return BadRequest(ModelState);
            }


           try
           {
            CurrencyRate entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("CurrencyRate updated with values: '{0}'", JsonConvert.SerializeObject(model)));

            return StatusCode((int)HttpStatusCode.NoContent);
        }
        
        [HttpDelete("{currencyRateID}")]
        public async Task<ActionResult> DeleteCurrencyRate(int currencyRateID) {

            var query = SearchByPk(currencyRateID).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("CurrencyRate with _currencyRateID = '{0}' doesn't exist.",currencyRateID));
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.CurrencyRates.Remove(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("CurrencyRate deleted with values: '{0}'", JsonConvert.SerializeObject(new CurrencyRateModel(entity))));

            return Ok(new CurrencyRateModel(entity));
        }
        
        private async Task<IQueryable<CurrencyRate>> SearchByPk(int currencyRateID) {

            var pb = PredicateBuilder.New<CurrencyRate>();
            pb = pb.And(p => p.CurrencyRateID.Equals(currencyRateID));

            return await Task.FromResult(_entities.CurrencyRates.AsExpandable().Where(pb));
        }
        
        private async Task<IQueryable<CurrencyRate>> SearchbyUnique(System.DateTime currencyRateDate, string fromCurrencyCode, string toCurrencyCode, decimal averageRate, decimal endOfDayRate) {

            var pb = PredicateBuilder.New<CurrencyRate>();
            pb = pb.And(p => p.CurrencyRateDate.Equals(currencyRateDate));
            pb = pb.And(p => p.FromCurrencyCode.Equals(fromCurrencyCode));
            pb = pb.And(p => p.ToCurrencyCode.Equals(toCurrencyCode));
            pb = pb.And(p => p.AverageRate.Equals(averageRate));
            pb = pb.And(p => p.EndOfDayRate.Equals(endOfDayRate));

            return await Task.FromResult(_entities.CurrencyRates.AsExpandable().Where(pb));
        }
    }
}

