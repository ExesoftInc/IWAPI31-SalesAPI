// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using InstantHelper;
using LinqKit;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SalesAPI.Entities;
using SalesAPI.Models;
using SalesAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace SalesAPI.Controllers {
    
    
    // Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("Currency")]
    public class CurrencyController : ControllerBase {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public CurrencyController(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        [HttpGet("")]
        public IQueryable<CurrencyModel> GetAllCurrencies() {

            ICollection<CurrencyModel> models = _mapper.Map<ICollection<CurrencyModel>>(_entities.Currencies);

            return models.AsQueryable();
        }
        
        [HttpGet("Paged")]
        public IPagedList<CurrencyModel> GetPagedCurrencies(int pageIndex, int pageSize) {

            ICollection<CurrencyModel> models = _mapper.Map<ICollection<CurrencyModel>>(_entities.Currencies);

            return models.ToPagedList(pageIndex, pageSize, 0, models.Count);
        }
        
        [HttpGet("{currencyCode}")]
        public async Task<ActionResult> GetCurrency_ByCurrencyCode(string currencyCode) {

            CurrencyModel model;

          var query = await SearchByPk(currencyCode);
            if (!query.Any()) {
              return NotFound();
            }
            else {
           model = _mapper.Map<CurrencyModel>(query.SingleOrDefault());
            }

            return Ok(model);
        }
        
        [HttpPost("")]
        public async Task<ActionResult> AddCurrency([FromBody]CurrencyModel model) {

            Currency entity = null;

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }


            var search = SearchbyUnique(model.CurrencyCode, model.Name);
            if (search.Result.Count() > 0) {
              return BadRequest("Duplicate Record;" + string.Format("Record already exists in the system with this(these) value(s):{0}, {1}", model.CurrencyCode, model.Name));
            }

           try
           {
                 entity = _mapper.Map<Currency>(model);
                _entities.Currencies.Add(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }

            _logger.LogInfo(string.Format("Currency added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return CreatedAtAction("GetCurrency_ByCurrencyCode", new {currencyCode = entity.CurrencyCode}, model);
        }
        
        [HttpPut("")]
        public async Task<ActionResult> UpdateCurrency([FromBody]CurrencyModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var query = SearchByPk(model.CurrencyCode).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("Currency with _currencyCode = '{0}' doesn't exist.",model.CurrencyCode));
            }

           try
           {
            Currency entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("Currency updated with values: '{0}'", JsonConvert.SerializeObject(model)));

            return StatusCode((int)HttpStatusCode.NoContent);
        }
        
        [HttpDelete("{currencyCode}")]
        public async Task<ActionResult> DeleteCurrency(string currencyCode) {

            var query = SearchByPk(currencyCode).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("Currency with _currencyCode = '{0}' doesn't exist.",currencyCode));
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.Currencies.Remove(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("Currency deleted with values: '{0}'", JsonConvert.SerializeObject(new CurrencyModel(entity))));

            return Ok(new CurrencyModel(entity));
        }
        
        private async Task<IQueryable<Currency>> SearchByPk(string currencyCode) {

            var pb = PredicateBuilder.New<Currency>();
            pb = pb.And(p => p.CurrencyCode.Equals(currencyCode));

            return await Task.FromResult(_entities.Currencies.AsExpandable().Where(pb));
        }
        
        private async Task<IQueryable<Currency>> SearchbyUnique(string currencyCode, string name) {

            var pb = PredicateBuilder.New<Currency>();
            pb = pb.And(p => p.CurrencyCode.Equals(currencyCode));
            pb = pb.And(p => p.Name.Equals(name));

            return await Task.FromResult(_entities.Currencies.AsExpandable().Where(pb));
        }
    }
}

