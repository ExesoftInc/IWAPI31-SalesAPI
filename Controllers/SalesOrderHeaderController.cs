// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using AutoMapper;
using InstantHelper;
using LinqKit;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SalesAPI.Entities;
using SalesAPI.Models;
using SalesAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Threading.Tasks;

namespace SalesAPI.Controllers {
    
    
    // Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("SalesOrderHeader")]
    public class SalesOrderHeaderController : ControllerBase {
        
        private IDbEntities _entities;
        
        private IMapper _mapper;
        
        private ILoggerManager _logger;
        
        public SalesOrderHeaderController(EntitiesContext context, IMapper mapper, ILoggerManager logger) {
            _entities = context;
            _mapper = mapper;
            _logger = logger;
        }
        
        [HttpGet("")]
        public IQueryable<SalesOrderHeaderModel> GetAllSalesOrderHeaders() {

            ICollection<SalesOrderHeaderModel> models = _mapper.Map<ICollection<SalesOrderHeaderModel>>(_entities.SalesOrderHeaders);

            return models.AsQueryable();
        }
        
        [HttpGet("Paged")]
        public IPagedList<SalesOrderHeaderModel> GetPagedSalesOrderHeaders(int pageIndex, int pageSize) {

            ICollection<SalesOrderHeaderModel> models = _mapper.Map<ICollection<SalesOrderHeaderModel>>(_entities.SalesOrderHeaders);

            return models.ToPagedList(pageIndex, pageSize, 0, models.Count);
        }
        
        [HttpGet("{salesOrderID}")]
        public async Task<ActionResult> GetSalesOrderHeader_BySalesOrderID(int salesOrderID) {

            SalesOrderHeaderModel model;

          var query = await SearchByPk(salesOrderID);
            if (!query.Any()) {
              return NotFound();
            }
            else {
           model = _mapper.Map<SalesOrderHeaderModel>(query.SingleOrDefault());
            }

            return Ok(model);
        }
        
        [HttpGet("GetSalesOrderHeader_ByCustomerID/{customerID}")]
        public IQueryable<SalesOrderHeaderModel> GetSalesOrderHeader_ByCustomerID(int customerID) {

            ICollection<SalesOrderHeaderModel> models = _mapper.Map<ICollection<SalesOrderHeaderModel>>(_entities.SalesOrderHeaders.Where(x => x.CustomerID == customerID));

            return models.AsQueryable();
        }
        
        [HttpGet("GetSalesOrderHeader_BySalesPersonID/{salesPersonID}")]
        public IQueryable<SalesOrderHeaderModel> GetSalesOrderHeader_BySalesPersonID(int salesPersonID) {

            ICollection<SalesOrderHeaderModel> models = _mapper.Map<ICollection<SalesOrderHeaderModel>>(_entities.SalesOrderHeaders.Where(x => x.SalesPersonID == salesPersonID));

            return models.AsQueryable();
        }
        
        [HttpGet("GetSalesOrderHeader_ByTerritoryID/{territoryID}")]
        public IQueryable<SalesOrderHeaderModel> GetSalesOrderHeader_ByTerritoryID(int territoryID) {

            ICollection<SalesOrderHeaderModel> models = _mapper.Map<ICollection<SalesOrderHeaderModel>>(_entities.SalesOrderHeaders.Where(x => x.TerritoryID == territoryID));

            return models.AsQueryable();
        }
        
        [HttpGet("GetSalesOrderHeader_ByCreditCardID/{creditCardID}")]
        public IQueryable<SalesOrderHeaderModel> GetSalesOrderHeader_ByCreditCardID(int creditCardID) {

            ICollection<SalesOrderHeaderModel> models = _mapper.Map<ICollection<SalesOrderHeaderModel>>(_entities.SalesOrderHeaders.Where(x => x.CreditCardID == creditCardID));

            return models.AsQueryable();
        }
        
        [HttpGet("GetSalesOrderHeader_ByCurrencyRateID/{currencyRateID}")]
        public IQueryable<SalesOrderHeaderModel> GetSalesOrderHeader_ByCurrencyRateID(int currencyRateID) {

            ICollection<SalesOrderHeaderModel> models = _mapper.Map<ICollection<SalesOrderHeaderModel>>(_entities.SalesOrderHeaders.Where(x => x.CurrencyRateID == currencyRateID));

            return models.AsQueryable();
        }
        
        [HttpPost("")]
        public async Task<ActionResult> AddSalesOrderHeader([FromBody]SalesOrderHeaderModel model) {

            SalesOrderHeader entity = null;

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var matchCustomerID = _entities.Customers.Where(x => x.CustomerID.Equals(model.CustomerID));
            if (!matchCustomerID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("CustomerID = '{0}' doesn't exist in the system.", model.CustomerID));
            }

            if (model.SalesPersonID != null) {
                var matchSalesPersonID = _entities.SalesPersons.Where(x => x.BusinessEntityID.Equals(model.SalesPersonID));
                if (!matchSalesPersonID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("SalesPersonID = '{0}' doesn't exist in the system.", model.SalesPersonID));
                }
            }

            if (model.TerritoryID != null) {
                var matchTerritoryID = _entities.SalesTerritories.Where(x => x.TerritoryID.Equals(model.TerritoryID));
                if (!matchTerritoryID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("TerritoryID = '{0}' doesn't exist in the system.", model.TerritoryID));
                }
            }

            if (model.CreditCardID != null) {
                var matchCreditCardID = _entities.CreditCards.Where(x => x.CreditCardID.Equals(model.CreditCardID));
                if (!matchCreditCardID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("CreditCardID = '{0}' doesn't exist in the system.", model.CreditCardID));
                }
            }

            if (model.CurrencyRateID != null) {
                var matchCurrencyRateID = _entities.CurrencyRates.Where(x => x.CurrencyRateID.Equals(model.CurrencyRateID));
                if (!matchCurrencyRateID.Any()) {
              return BadRequest("Foreign Key Violation;" + string.Format("CurrencyRateID = '{0}' doesn't exist in the system.", model.CurrencyRateID));
                }
            }


            var search = SearchbyUnique(model.RevisionNumber, model.DueDate, model.ShipDate, model.Status, model.OnlineOrderFlag, model.PurchaseOrderNumber, model.AccountNumber, model.CustomerID, model.SalesPersonID, model.TerritoryID, model.BillToAddressID, model.ShipToAddressID, model.ShipMethodID, model.CreditCardID, model.CreditCardApprovalCode, model.CurrencyRateID, model.SubTotal, model.TaxAmt, model.Freight, model.Comment);
            if (search.Result.Count() > 0) {
              return BadRequest("Duplicate Record;" + string.Format("Record already exists in the system with this(these) value(s):{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}", model.RevisionNumber, model.DueDate, model.ShipDate, model.Status, model.OnlineOrderFlag, model.PurchaseOrderNumber, model.AccountNumber, model.CustomerID, model.SalesPersonID, model.TerritoryID, model.BillToAddressID, model.ShipToAddressID, model.ShipMethodID, model.CreditCardID, model.CreditCardApprovalCode, model.CurrencyRateID, model.SubTotal, model.TaxAmt, model.Freight, model.Comment));
            }

           try
           {
                 entity = _mapper.Map<SalesOrderHeader>(model);
                _entities.SalesOrderHeaders.Add(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }

            model.SalesOrderID = entity.SalesOrderID;
            _logger.LogInfo(string.Format("SalesOrderHeader added with values: '{0}'", JsonConvert.SerializeObject(model)));

            return CreatedAtAction("GetSalesOrderHeader_BySalesOrderID", new {salesOrderID = entity.SalesOrderID}, model);
        }
        
        [HttpPut("{salesOrderID}")]
        public async Task<ActionResult> UpdateSalesOrderHeader(int salesOrderID, [FromBody]SalesOrderHeaderModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var query = SearchByPk(salesOrderID).Result;
            if (!query.Any()) {
              ModelState.AddModelError("Record Not Found", string.Format("SalesOrderHeader with _salesOrderID = '{0}' doesn't exist.",salesOrderID)); 
              return BadRequest(ModelState);
            }

            var matchCustomerID = _entities.Customers.Where(x => x.CustomerID.Equals(model.CustomerID));
            if (!matchCustomerID.Any()) {
              ModelState.AddModelError("Foreign Key Violation", string.Format("SalesOrderHeader with CustomerID = '{0}' doesn't exist.", model.CustomerID)); 
              return BadRequest(ModelState);
            }


            var matchSalesPersonID = _entities.SalesPersons.Where(x => x.BusinessEntityID.Equals(model.SalesPersonID));
            if (!matchSalesPersonID.Any()) {
              ModelState.AddModelError("Foreign Key Violation", string.Format("SalesOrderHeader with SalesPersonID = '{0}' doesn't exist.", model.SalesPersonID)); 
              return BadRequest(ModelState);
            }


            var matchTerritoryID = _entities.SalesTerritories.Where(x => x.TerritoryID.Equals(model.TerritoryID));
            if (!matchTerritoryID.Any()) {
              ModelState.AddModelError("Foreign Key Violation", string.Format("SalesOrderHeader with TerritoryID = '{0}' doesn't exist.", model.TerritoryID)); 
              return BadRequest(ModelState);
            }


            var matchCreditCardID = _entities.CreditCards.Where(x => x.CreditCardID.Equals(model.CreditCardID));
            if (!matchCreditCardID.Any()) {
              ModelState.AddModelError("Foreign Key Violation", string.Format("SalesOrderHeader with CreditCardID = '{0}' doesn't exist.", model.CreditCardID)); 
              return BadRequest(ModelState);
            }


            var matchCurrencyRateID = _entities.CurrencyRates.Where(x => x.CurrencyRateID.Equals(model.CurrencyRateID));
            if (!matchCurrencyRateID.Any()) {
              ModelState.AddModelError("Foreign Key Violation", string.Format("SalesOrderHeader with CurrencyRateID = '{0}' doesn't exist.", model.CurrencyRateID)); 
              return BadRequest(ModelState);
            }


           try
           {
            SalesOrderHeader entity = query.SingleOrDefault();
             entity = model.ToEntity(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SalesOrderHeader updated with values: '{0}'", JsonConvert.SerializeObject(model)));

            return StatusCode((int)HttpStatusCode.NoContent);
        }
        
        [HttpDelete("{salesOrderID}")]
        public async Task<ActionResult> DeleteSalesOrderHeader(int salesOrderID) {

            var query = SearchByPk(salesOrderID).Result;
            if (!query.Any()) {
              return BadRequest("Record Not Found;" + string.Format("SalesOrderHeader with _salesOrderID = '{0}' doesn't exist.",salesOrderID));
            }
            var entity = query.SingleOrDefault();

           try
           {
                _entities.SalesOrderHeaders.Remove(entity);
               await _entities.SaveChangesAsync();
            }
            catch (Exception e)
            {
                throw e;
            }
            _logger.LogInfo(string.Format("SalesOrderHeader deleted with values: '{0}'", JsonConvert.SerializeObject(new SalesOrderHeaderModel(entity))));

            return Ok(new SalesOrderHeaderModel(entity));
        }
        
        private async Task<IQueryable<SalesOrderHeader>> SearchByPk(int salesOrderID) {

            var pb = PredicateBuilder.New<SalesOrderHeader>();
            pb = pb.And(p => p.SalesOrderID.Equals(salesOrderID));

            return await Task.FromResult(_entities.SalesOrderHeaders.AsExpandable().Where(pb));
        }
        
        private async Task<IQueryable<SalesOrderHeader>> SearchbyUnique(
                    byte revisionNumber, 
                    System.DateTime dueDate, 
                    System.DateTime? shipDate, 
                    byte status, 
                    bool onlineOrderFlag, 
                    string purchaseOrderNumber, 
                    string accountNumber, 
                    int customerID, 
                    System.Int32? salesPersonID, 
                    System.Int32? territoryID, 
                    int billToAddressID, 
                    int shipToAddressID, 
                    int shipMethodID, 
                    System.Int32? creditCardID, 
                    string creditCardApprovalCode, 
                    System.Int32? currencyRateID, 
                    decimal subTotal, 
                    decimal taxAmt, 
                    decimal freight, 
                    string comment) {

            var pb = PredicateBuilder.New<SalesOrderHeader>();
            pb = pb.And(p => p.RevisionNumber.Equals(revisionNumber));
            pb = pb.And(p => p.DueDate.Equals(dueDate));
            if (shipDate.HasValue) {
                pb = pb.And(p => ((System.DateTime)p.ShipDate).Equals(shipDate.Value));
            }
            else {
                pb = pb.And(p => p.ShipDate == null);
            }
            pb = pb.And(p => p.Status.Equals(status));
            pb = pb.And(p => p.OnlineOrderFlag.Equals(onlineOrderFlag));
            pb = pb.And(p => p.PurchaseOrderNumber.Equals(purchaseOrderNumber));
            pb = pb.And(p => p.AccountNumber.Equals(accountNumber));
            pb = pb.And(p => p.CustomerID.Equals(customerID));
            if (salesPersonID.HasValue) {
                pb = pb.And(p => ((System.Int32)p.SalesPersonID).Equals(salesPersonID.Value));
            }
            else {
                pb = pb.And(p => p.SalesPersonID == null);
            }
            if (territoryID.HasValue) {
                pb = pb.And(p => ((System.Int32)p.TerritoryID).Equals(territoryID.Value));
            }
            else {
                pb = pb.And(p => p.TerritoryID == null);
            }
            pb = pb.And(p => p.BillToAddressID.Equals(billToAddressID));
            pb = pb.And(p => p.ShipToAddressID.Equals(shipToAddressID));
            pb = pb.And(p => p.ShipMethodID.Equals(shipMethodID));
            if (creditCardID.HasValue) {
                pb = pb.And(p => ((System.Int32)p.CreditCardID).Equals(creditCardID.Value));
            }
            else {
                pb = pb.And(p => p.CreditCardID == null);
            }
            pb = pb.And(p => p.CreditCardApprovalCode.Equals(creditCardApprovalCode));
            if (currencyRateID.HasValue) {
                pb = pb.And(p => ((System.Int32)p.CurrencyRateID).Equals(currencyRateID.Value));
            }
            else {
                pb = pb.And(p => p.CurrencyRateID == null);
            }
            pb = pb.And(p => p.SubTotal.Equals(subTotal));
            pb = pb.And(p => p.TaxAmt.Equals(taxAmt));
            pb = pb.And(p => p.Freight.Equals(freight));
            pb = pb.And(p => p.Comment.Equals(comment));

            return await Task.FromResult(_entities.SalesOrderHeaders.AsExpandable().Where(pb));
        }
    }
}

