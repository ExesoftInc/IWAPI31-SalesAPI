// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using System;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace SalesAPI.Entities {
    
    
    public class EntitiesContext : DbContext, IDbEntities {
        
        public EntitiesContext() {
            //empty constructor
        }
        
        public EntitiesContext(DbContextOptions<EntitiesContext> options) : 
                base(options) {
        }
        
        public virtual DbSet<CountryRegionCurrency> CountryRegionCurrencies { get; set; }
        
        public virtual DbSet<CreditCard> CreditCards { get; set; }
        
        public virtual DbSet<Currency> Currencies { get; set; }
        
        public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }
        
        public virtual DbSet<Customer> Customers { get; set; }
        
        public virtual DbSet<PersonCreditCard> PersonCreditCards { get; set; }
        
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        
        public virtual DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        
        public virtual DbSet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; }
        
        public virtual DbSet<SalesPerson> SalesPersons { get; set; }
        
        public virtual DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; }
        
        public virtual DbSet<SalesReason> SalesReasons { get; set; }
        
        public virtual DbSet<SalesTaxRate> SalesTaxRates { get; set; }
        
        public virtual DbSet<SalesTerritory> SalesTerritories { get; set; }
        
        public virtual DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; }
        
        public virtual DbSet<ShoppingCartItem> ShoppingCartItems { get; set; }
        
        public virtual DbSet<SpecialOffer> SpecialOffers { get; set; }
        
        public virtual DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; }
        
        public virtual DbSet<Store> Stores { get; set; }
        
        public virtual async Task<int> SaveChangesAsync() {
           return await SaveChangesAsync(new CancellationToken());
        }
        
        protected override void OnModelCreating(ModelBuilder modelBuilder) {

            base.OnModelCreating(modelBuilder);
            modelBuilder.ApplyConfiguration(new CountryRegionCurrencyConfiguration());
            modelBuilder.ApplyConfiguration(new CreditCardConfiguration());
            modelBuilder.ApplyConfiguration(new CurrencyConfiguration());
            modelBuilder.ApplyConfiguration(new CurrencyRateConfiguration());
            modelBuilder.ApplyConfiguration(new CustomerConfiguration());
            modelBuilder.ApplyConfiguration(new PersonCreditCardConfiguration());
            modelBuilder.ApplyConfiguration(new SalesOrderDetailConfiguration());
            modelBuilder.ApplyConfiguration(new SalesOrderHeaderConfiguration());
            modelBuilder.ApplyConfiguration(new SalesOrderHeaderSalesReasonConfiguration());
            modelBuilder.ApplyConfiguration(new SalesPersonConfiguration());
            modelBuilder.ApplyConfiguration(new SalesPersonQuotaHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new SalesReasonConfiguration());
            modelBuilder.ApplyConfiguration(new SalesTaxRateConfiguration());
            modelBuilder.ApplyConfiguration(new SalesTerritoryConfiguration());
            modelBuilder.ApplyConfiguration(new SalesTerritoryHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new ShoppingCartItemConfiguration());
            modelBuilder.ApplyConfiguration(new SpecialOfferConfiguration());
            modelBuilder.ApplyConfiguration(new SpecialOfferProductConfiguration());
            modelBuilder.ApplyConfiguration(new StoreConfiguration());
        }
    }
}

