// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace SalesAPI.Entities {
    
    
    public class CurrencyRateConfiguration : IEntityTypeConfiguration<CurrencyRate> {
        
        private string _schema = "Sales";
        
        public virtual void Configure(EntityTypeBuilder<CurrencyRate> builder) {
            Configure(builder, _schema);
        }
        
        private void Configure(EntityTypeBuilder<CurrencyRate> builder, string schema) {
            builder.ToTable("CurrencyRate", schema);
            builder.HasKey(x => x.CurrencyRateID);

            builder.Property(x => x.CurrencyRateID).HasColumnName(@"CurrencyRateID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd();
            builder.Property(x => x.CurrencyRateDate).HasColumnName(@"CurrencyRateDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.FromCurrencyCode).HasColumnName(@"FromCurrencyCode").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(3);
            builder.Property(x => x.ToCurrencyCode).HasColumnName(@"ToCurrencyCode").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(3);
            builder.Property(x => x.AverageRate).HasColumnName(@"AverageRate").HasColumnType("money").IsRequired().HasColumnType("decimal19,4)");
            builder.Property(x => x.EndOfDayRate).HasColumnName(@"EndOfDayRate").HasColumnType("money").IsRequired().HasColumnType("decimal19,4)");
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            //Foreign keys
            builder.HasOne(a => a.Currency_FromCurrencyCode).WithMany(b => b.CurrencyRates_FromCurrencyCode).HasForeignKey(c => c.FromCurrencyCode).OnDelete(DeleteBehavior.Restrict); // FK_CurrencyRate_Currency_FromCurrencyCode
            builder.HasOne(a => a.Currency_ToCurrencyCode).WithMany(b => b.CurrencyRates_ToCurrencyCode).HasForeignKey(c => c.ToCurrencyCode).OnDelete(DeleteBehavior.Restrict); // FK_CurrencyRate_Currency_ToCurrencyCode
        }
    }
}

