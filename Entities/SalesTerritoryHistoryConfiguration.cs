// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace SalesAPI.Entities {
    
    
    public class SalesTerritoryHistoryConfiguration : IEntityTypeConfiguration<SalesTerritoryHistory> {
        
        private string _schema = "Sales";
        
        public virtual void Configure(EntityTypeBuilder<SalesTerritoryHistory> builder) {
            Configure(builder, _schema);
        }
        
        private void Configure(EntityTypeBuilder<SalesTerritoryHistory> builder, string schema) {
            builder.ToTable("SalesTerritoryHistory", schema);
            builder.HasKey(x => new { x.BusinessEntityID, x.StartDate, x.TerritoryID });

            builder.Property(x => x.BusinessEntityID).HasColumnName(@"BusinessEntityID").HasColumnType("int").IsRequired();
            builder.Property(x => x.TerritoryID).HasColumnName(@"TerritoryID").HasColumnType("int").IsRequired();
            builder.Property(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired().ValueGeneratedOnAddOrUpdate();
            builder.Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            //Foreign keys
            builder.HasOne(a => a.SalesPerson).WithMany(b => b.SalesTerritoryHistories).HasForeignKey(c => c.BusinessEntityID).OnDelete(DeleteBehavior.Restrict); // FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID
            builder.HasOne(a => a.SalesTerritory).WithMany(b => b.SalesTerritoryHistories).HasForeignKey(c => c.TerritoryID).OnDelete(DeleteBehavior.Restrict); // FK_SalesTerritoryHistory_SalesTerritory_TerritoryID
        }
    }
}

